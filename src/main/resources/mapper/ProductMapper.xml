<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coding24h.mall_spring.mapper.ProductMapper">

    <select id="getProductDetailById" resultMap="ProductDetailResultMap">
        SELECT
            p.product_id,
            p.seller_id, -- 1. 根据新的表结构，从 products 表中查询 seller_id
            p.title,
            p.description,
            p.price,
            p.original_price,
            p.condition,
            CASE p.`condition`
                WHEN 1 THEN '全新'
                WHEN 2 THEN '95新'
                WHEN 3 THEN '9成新'
                WHEN 4 THEN '8成新'
                WHEN 5 THEN '7成新及以下'
                ELSE '未知'
                END AS conditionText,
            p.stock,
            p.view_count,
            p.favorite_count,
            p.custom_attributes,
            p.location,
            pc.category_id,
            pc.category_name
        FROM
            products p
                LEFT JOIN
            product_categories pc ON p.category_id = pc.category_id
        WHERE
            p.product_id = #{productId}
    </select>

    <resultMap id="ProductDetailResultMap" type="com.coding24h.mall_spring.entity.vo.ProductDetailVO">
        <id column="product_id" property="productId"/>
        <!-- 2. 添加 seller_id 到 sellerId 的映射 -->
        <result column="seller_id" property="sellerId"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="price" property="currentPrice"/>
        <result column="original_price" property="originalPrice"/>
        <result column="stock" property="stock"/>
        <result column="view_count" property="viewCount"/>
        <result column="favorite_count" property="favoriteCount"/>

        <result column="condition" property="condition"/>
        <result column="conditionText" property="conditionText"/>
        <result column="location" property="location"/>
        <result column="custom_attributes"
                property="specs"
                typeHandler="com.coding24h.mall_spring.util.JsonMapTypeHandler"/>

        <association property="category" javaType="com.coding24h.mall_spring.entity.Category">
            <id column="category_id" property="categoryId"/>
            <result column="category_name" property="categoryName"/>
        </association>

        <collection property="images" ofType="com.coding24h.mall_spring.entity.ProductImage"
                    select="com.coding24h.mall_spring.mapper.ProductMapper.getProductImages"
                    column="product_id"/>
    </resultMap>


    <select id="getProductImages" resultType="ProductImage">
        SELECT
        image_id AS imageId,
        image_url AS imageUrl,  <!-- 别名确保匹配 -->
        is_main AS isMain,
        sort_order AS sortOrder
        FROM product_images
        WHERE product_id = #{productId}
        ORDER BY is_main DESC, sort_order ASC
    </select>

    <select id="selectProductDetailById" resultType="com.coding24h.mall_spring.dto.ProductDetailDTO">
        SELECT
        p.product_id,
        p.title,
        p.description,
        p.price,
        p.original_price,
        p.`condition`,
        CASE p.`condition`
        WHEN 1 THEN '全新'
        WHEN 2 THEN '95新'
        WHEN 3 THEN '9成新'
        WHEN 4 THEN '8成新'
        WHEN 5 THEN '7成新及以下'
        ELSE '未知'
        END AS conditionText,
        p.stock,
        p.location,
        p.custom_attributes,
        DATE_FORMAT(p.created_at, '%Y-%m-%d %H:%i') AS created_at_formatted,
        <!-- 简化分类路径查询 -->
        c1.category_name AS category_path,
        EXISTS(
        SELECT 1 FROM product_favorites pf
        WHERE pf.product_id = p.product_id
        AND pf.user_id = #{userId}
        ) AS is_favorited,
        CASE
        WHEN p.original_price > 0
        THEN CONCAT(ROUND((1 - p.price / p.original_price) * 100), '%')
        ELSE NULL
        END AS discount,
        pi.image_url,
        pi.sort_order,
        pi.is_main
        FROM products p
        <!-- 只需要单表连接 -->
        LEFT JOIN product_categories c1 ON p.category_id = c1.category_id
        LEFT JOIN product_images pi ON p.product_id = pi.product_id
        WHERE p.product_id = #{productId}
        AND p.status = 1
        AND (pi.verification_status IS NULL OR pi.verification_status = 1)
        ORDER BY pi.sort_order ASC
    </select>

    <!-- 商品搜索 -->
    <!-- 商品搜索 -->
    <select id="searchProducts" resultType="com.coding24h.mall_spring.entity.vo.ProductVO">
        SELECT
        p.product_id AS id,
        p.title,
        p.price,
        p.original_price AS originalPrice,
        -- 折扣率计算
        CASE
        WHEN p.original_price > 0 AND p.original_price > p.price
        THEN ROUND((1 - p.price / p.original_price) * 100)
        ELSE 0
        END AS discountRate,
        p.condition,
        CASE p.condition
        WHEN 1 THEN '全新'
        WHEN 2 THEN '95新'
        WHEN 3 THEN '9成新'
        WHEN 4 THEN '8成新'
        WHEN 5 THEN '7成新及以下'
        ELSE '未知'
        END AS conditionText,
        p.stock,
        p.location,
        -- 发布时间格式化
        CASE
        WHEN TIMESTAMPDIFF(HOUR, p.created_at, NOW()) &lt; 24  <!-- 已修复 -->
        THEN CONCAT(TIMESTAMPDIFF(HOUR, p.created_at, NOW()), '小时前')
        WHEN TIMESTAMPDIFF(DAY, p.created_at, NOW()) &lt; 7  <!-- 已修复 -->
        THEN CONCAT(TIMESTAMPDIFF(DAY, p.created_at, NOW()), '天前')
        ELSE DATE_FORMAT(p.created_at, '%Y-%m-%d')
        END AS createdAt,
        -- 主图查询
        (SELECT image_url FROM product_images
        WHERE product_id = p.product_id AND is_main = 1
        LIMIT 1) AS image,
        -- 是否被当前用户收藏
        CASE
        WHEN #{currentUserId} IS NOT NULL
        THEN EXISTS (
        SELECT 1 FROM product_favorites
        WHERE product_id = p.product_id AND user_id = #{currentUserId}
        )
        ELSE false
        END AS isFavorite,
        p.category_id AS categoryId,
        p.favorite_count AS favoriteCount, -- 新增收藏数字段，用于排序
        p.status,
        CASE p.status
        WHEN 1 THEN '上架'
        WHEN 2 THEN '下架'
        WHEN 3 THEN '售罄'
        WHEN 4 THEN '审核中'
        ELSE '未知'
        END AS statusText
        FROM products p
        WHERE 1=1
        <!-- ✅ 移除了默认的 p.status = 1 过滤，查询所有状态的商品 -->

        <if test="query.sellerId != null">
            AND p.seller_id = #{query.sellerId}
        </if>
        <if test="query.title != null and query.title != ''">
            AND p.title LIKE CONCAT('%', #{query.title}, '%')
        </if>
        <if test="query.categoryId != null">
            AND p.category_id = #{query.categoryId}
        </if>
        <if test="query.priceMin != null">
            AND p.price >= #{query.priceMin}
        </if>
        <if test="query.priceMax != null">
            AND p.price &lt;= #{query.priceMax}
        </if>
        <if test="query.condition != null">
            AND p.condition = #{query.condition}
        </if>
        <if test="query.inStock != null and query.inStock">
            AND p.stock > 0
        </if>
        <if test="query.timeRange != null and query.timeRange != ''">
            AND p.created_at >= DATE_SUB(NOW(), INTERVAL #{query.timeRange} DAY)
        </if>
        <!-- ✅ 保留status筛选条件，前端可以主动筛选 -->
        <if test="query.status != null">
            AND p.status = #{query.status}
        </if>

        ORDER BY
        <choose>
            <when test="query.sort == 'price_asc'">p.price ASC</when>
            <when test="query.sort == 'price_desc'">p.price DESC</when>
            <when test="query.sort == 'newest'">p.created_at DESC</when>
            <when test="query.sort == 'popular'">p.view_count DESC</when>
            <!-- ✅ 新增排序选项 -->
            <when test="query.sort == 'favorite_desc'">p.favorite_count DESC</when>
            <when test="query.sort == 'discount_desc'">discountRate DESC</when>
            <otherwise>p.created_at DESC</otherwise>
        </choose>
        LIMIT #{pageSize} OFFSET #{offset}
    </select>
    <!-- 商品计数 -->
    <select id="countProducts" resultType="long">
        SELECT COUNT(*)
        FROM products p
        WHERE 1 = 1
        <if test="query.sellerId != null">
            AND p.seller_id = #{query.sellerId}
        </if>
        <if test="query.title != null and query.title != ''">
            AND p.title LIKE CONCAT('%', #{query.title}, '%')
        </if>
        <if test="query.categoryId != null">
            AND p.category_id = #{query.categoryId}
        </if>
        <if test="query.priceMin != null">
            AND p.price >= #{query.priceMin}
        </if>
        <if test="query.priceMax != null">
            AND p.price &lt;= #{query.priceMax} <!-- 已修复 -->
        </if>
        <if test="query.condition != null">
            AND p.condition = #{query.condition}
        </if>
        <if test="query.inStock != null and query.inStock">
            AND p.stock > 0
        </if>
        <if test="query.timeRange != null">
            AND p.created_at >= DATE_SUB(NOW(), INTERVAL #{query.timeRange} DAY)
        </if>
    </select>

    <!-- 获取所有启用的顶级分类 -->
    <select id="findAllActiveCategories" resultType="com.coding24h.mall_spring.entity.Category">
        SELECT category_id, category_name
        FROM product_categories
        WHERE is_show = 1
        ORDER BY sort_order DESC, category_id ASC
    </select>


    <!-- 获取所有启用的分类 -->
    <select id="findAllCategoriesTree" resultType="com.coding24h.mall_spring.entity.Category">
        SELECT
        category_id,
        parent_id,
        category_name,
        sort_order,
        is_show
        FROM
        product_categories
        <!-- 注意：为了管理，我们应该获取所有分类，而不仅是显示的 -->
        <!-- WHERE is_show = 1 -->
        ORDER BY
        sort_order DESC, category_id ASC
    </select>

    <!-- 新增：根据父ID查找子分类 -->
    <select id="findCategoriesByParentId" resultType="com.coding24h.mall_spring.entity.Category">
        SELECT category_id, parent_id, category_name, sort_order, is_show
        FROM product_categories
        WHERE parent_id = #{parentId}
    </select>

    <!-- 新增：插入一个新的分类 -->
    <insert id="insertCategory" parameterType="com.coding24h.mall_spring.entity.Category"
            useGeneratedKeys="true" keyProperty="categoryId">
        INSERT INTO product_categories (parent_id, category_name, sort_order, is_show)
        VALUES (#{parentId}, #{categoryName}, #{sortOrder}, #{isShow})
    </insert>

    <!-- 新增：更新一个分类 -->
    <update id="updateCategory" parameterType="com.coding24h.mall_spring.entity.Category">
        UPDATE product_categories
        SET
            parent_id = #{parentId},
            category_name = #{categoryName},
            sort_order = #{sortOrder},
            is_show = #{isShow}
        WHERE
            category_id = #{categoryId}
    </update>

    <!-- 新增：根据ID删除一个分类 -->
    <delete id="deleteCategoryById" parameterType="java.lang.Integer">
        DELETE FROM product_categories WHERE category_id = #{categoryId}
    </delete>

    <!-- 根据ID查询商品 -->
    <select id="selectById" resultType="com.coding24h.mall_spring.entity.Product">
        SELECT * FROM products
        WHERE product_id = #{productId}
    </select>

    <!-- 查询商品主图，如果没有主图则取第一张图片 -->
    <select id="selectMainImageByProductId" resultType="java.lang.String">
        SELECT image_url FROM product_images
        WHERE product_id = #{productId}
        ORDER BY is_main DESC, sort_order ASC
        LIMIT 1
    </select>

    <!-- 根据商品ID查询图片列表 -->
    <select id="selectImagesByProductId" resultType="com.coding24h.mall_spring.entity.ProductImage">
        SELECT image_id, image_url, sort_order, is_main, verification_status
        FROM product_images
        WHERE product_id = #{productId}
          AND verification_status = 1
        ORDER BY sort_order ASC, image_id ASC
    </select>

    <!-- 原始查询：仅查询商品基本信息，不包含图片 -->
    <select id="selectBySellerId" resultType="com.coding24h.mall_spring.entity.Product">
        SELECT * FROM products
        WHERE seller_id = #{sellerId}
        <if test="status != null">
            AND status = #{status}
        </if>
        ORDER BY created_at DESC
    </select>

    <!-- 更新库存 -->
    <update id="updateStock">
        UPDATE products
        SET stock = #{stock}, updated_at = NOW()
        WHERE product_id = #{productId}
    </update>

    <!-- 更新浏览量 -->
    <update id="incrementViewCount">
        UPDATE products
        SET view_count = view_count + 1, updated_at = NOW()
        WHERE product_id = #{productId}
    </update>

    <!-- 更新收藏量 -->
    <update id="updateFavoriteCount">
        UPDATE products
        SET favorite_count = favorite_count + #{increment}, updated_at = NOW()
        WHERE product_id = #{productId}
    </update>

    <!-- 新增商品 -->
    <insert id="insertProduct" useGeneratedKeys="true" keyProperty="productId">
        INSERT INTO products (
            seller_id, title, description, category_id, price, original_price,
            `condition`, stock, status, location, custom_attributes, created_at
        ) VALUES (
                     #{sellerId}, #{title}, #{description}, #{categoryId}, #{price}, #{originalPrice},
                     #{condition}, #{stock}, #{status}, #{location},
                     #{customAttributes, typeHandler=com.coding24h.mall_spring.util.JsonMapTypeHandler}, NOW()
                 )
    </insert>

    <!-- 更新商品状态 -->
    <update id="updateProductStatus">
        UPDATE products
        SET status = #{status}, updated_at = NOW()
        WHERE product_id = #{productId}
    </update>


    <!-- 更新商品 -->
    <update id="updateProduct" parameterType="com.coding24h.mall_spring.entity.Product">
        UPDATE products
        SET
            title = #{title},
            description = #{description},
            category_id = #{categoryId},
            price = #{price},
            original_price = #{originalPrice},
            `condition` = #{condition},
            stock = #{stock},
            status = #{status},
            location = #{location},
            custom_attributes = #{customAttributes, typeHandler=com.coding24h.mall_spring.util.JsonMapTypeHandler},
            updated_at = NOW()
        WHERE product_id = #{productId}
    </update>

    <!-- 物理删除商品 -->
    <delete id="deleteById">
        DELETE FROM products
        WHERE product_id = #{productId}
    </delete>

    <insert id="batchInsertImages" parameterType="java.util.List">
        INSERT INTO product_images (product_id, image_url, is_main, created_at)
        VALUES
        <foreach collection="list" item="image" separator=",">
            (#{image.productId}, #{image.imageUrl}, #{image.isMain}, NOW())
        </foreach>
    </insert>

    <!-- 获取卖家商品总数 -->
    <select id="countSellerProducts" resultType="int">
        SELECT COUNT(*)
        FROM products
        WHERE seller_id = #{sellerId}
    </select>

    <!-- 获取分页商品数据 -->
    <select id="selectSellerProducts" resultType="com.coding24h.mall_spring.dto.ProductForSellerDTO">
        SELECT
            p.product_id AS id,
            COALESCE(
                    (SELECT pi.image_url
                     FROM product_images pi
                     WHERE pi.product_id = p.product_id
                     ORDER BY pi.is_main DESC, pi.sort_order ASC
                     LIMIT 1),
                    'http://localhost:8080/uploads/products/example.png'
            ) AS image,
            p.title AS name,
            p.price AS price,
            p.stock AS stock,
            p.status AS status,
            CASE p.status
                WHEN 1 THEN '上架中'
                WHEN 2 THEN '已下架'
                WHEN 3 THEN '已售出'
                WHEN 4 THEN '待审核'
                ELSE '未知状态'
                END AS statusText
        FROM products p
        WHERE p.seller_id = #{sellerId}
        ORDER BY p.created_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>


</mapper>
